// HW2 by Loga Vignesh Ramiah
// SUID: 483176096
// HW2
// Due: 11:59 PM, Friday September 29.
/*
float f1{3.79652}, f2{3.4213};
cout << fixed << setprecision(2) << f1 << " " << f2 << endl;
will print 3.80 3.42
It will do rounding and keep 2 digits after the decimal point.
You need to #include <iomanip>
For GPA calculation:
if you have three courses
3.667 3 credits
4.0 1 credit
3.0 4 credits
GPA = (3.667 * 3 + 4.0 * 1 + 3.0 * 4)/(3+1+4)
*/

#include <iostream>
#include <list>
#include <map>
#include <string>
#include <iomanip>

using namespace std;

class course {
public:
	string name; // CIS554
	int section; // 1
	int credits; // 3
	string grade; // A-

	course() {}

	course(string n, int s, int c, string g) {
		name = n;
		section = s;
		credits = c;
		grade = g;
	}

	bool operator<(const course& c) const;
	bool operator==(const course& c) const;
	float num_grade();
};

ostream& operator<<(ostream& str, map<int, pair<pair<int, float>*, map<int, tuple<int, float, list<course*> >* >* >>& DB);

float course::num_grade() {
	map<string, float> M{
		{"A", 4.0f},
		{"A-", 3.667f},
		{"B+", 3.333f},
		{"B", 3.0f},
		{"B-", 2.667f},
		{"C+", 2.333f},
		{"C", 2.0f},
		{"C-", 1.667f},
		{"D", 1.0f},
		{"D-", 0.667f},
		{"F", 0.0f}
	};
	return M[grade];
}

bool course::operator<(const course& c) const {
	return (name < c.name);
}

bool course::operator==(const course& c) const {
	return (name == c.name);
}

/*
* Semester numbers: Spring 2019: 20191; Fall 2019: 20192, etc.
Implement the following functions.
When adding a student, if the student is already in DB, then ignore the operation.
When adding a course, if the course is already in DB (even if it is in
a different semester), then ignore the operation.
All courses in a semester should be sorted according to name (increasing order)
When dropping a course, if the course does not exist, then ignore the operation.
When removing a student, if the student does not exist, then ignore the operation.
All courses in a semester need to be sorted.
When dropping or adding a course, overall GPA, semester GPA, overall credits and semester credits all need to be updated.
If after drop_course, the list becomes empty, you don't need to remove the list.
*/

// Implement the following functions.
void add_student(map<int, pair<pair<int, float>*, map<int, tuple<int, float, list<course*> >* >* >>& DB, int id);
void remove_student(map<int, pair<pair<int, float>*, map<int, tuple<int, float, list<course*> >* >* >>& DB, int id);
void add_course(map<int, pair<pair<int, float>*, map<int, tuple<int, float, list<course*> >* >* >>& DB, int semester, int id, course c); // 20171 Spring semester of 2017; 20172: Fall semester of 2017
void drop_course(map<int, pair<pair<int, float>*, map<int, tuple<int, float, list<course*> >* >* >>& DB, int semester, int id, course c);
void print_student_semester_courses(map<int, pair<pair<int, float>*, map<int, tuple<int, float, list<course*> >* >* >>& DB, int semester, int id);
void print_student_all_courses(map<int, pair<pair<int, float>*, map<int, tuple<int, float, list<course*> >* >* >>& DB, int id);

int main() {
	map<int, pair<pair<int, float>*, map<int, tuple<int, float, list<course*> >* >* >> DB;

	add_student(DB, 11111);

	course C1("CIS554", 1, 3, "A-"), C2("CSE674", 1, 3, "B+"), C3("MAT296", 8, 4, "A"), C4("WRT205", 5, 3, "A");

	add_course(DB, 20171, 11111, C1);
	add_course(DB, 20171, 11111, C4);
	add_course(DB, 20171, 11111, C3);
	add_course(DB, 20171, 11111, C2);

	print_student_semester_courses(DB, 20171, 11111);

	drop_course(DB, 20171, 11111, C1);

	print_student_semester_courses(DB, 20171, 11111); // sorted according to course name

	course C5("CIS351", 2, 3, "A-"), C6("PSY205", 5, 3, "B+"), C7("MAT331", 2, 3, "A"), C8("ECN203", 4, 3, "A");

	add_course(DB, 20172, 11111, C5);
	add_course(DB, 20172, 11111, C6);
	add_course(DB, 20172, 11111, C7);
	add_course(DB, 20172, 11111, C8);
	add_course(DB, 20172, 11111, C3);

	print_student_all_courses(DB, 11111); // ID GPA

	add_student(DB, 11112);
	add_course(DB, 20171, 11112, C2);
	add_course(DB, 20171, 11112, C5);
	add_course(DB, 20171, 11112, C7);
	add_course(DB, 20171, 11112, C4);

	print_student_semester_courses(DB, 20171, 11112);

	add_course(DB, 20172, 11112, C8);
	add_course(DB, 20172, 11112, C3);
	add_course(DB, 20172, 11112, C5);
	add_course(DB, 20172, 11112, C1);

	print_student_semester_courses(DB, 20172, 11112);
	print_student_all_courses(DB, 11112);

	// Overload operator<< to allow the following cout statements.
	cout << DB << endl;

	remove_student(DB, 11111);

	cout << DB << endl;

	return 0;
}

void add_student(map<int, pair<pair<int, float>*, map<int, tuple<int, float, list<course*> >* >* >>& DB, int id) {
	auto it1{ DB.find(id) };
	if (it1 != DB.end()) return;
	DB[id] = pair<pair<int, float>*, map<int, tuple<int, float, list<course*> >* >* >{ new pair<int, float>{0, 0.0f}, new map<int, tuple<int, float, list<course*> >* >{} };
}

void add_course(map<int, pair<pair<int, float>*, map<int, tuple<int, float, list<course*> >* >* >>& DB, int semester, int id, course c) {
	auto it1{ DB.find(id) };
	if (it1 == DB.end()) return;
	auto& R1{ *DB[id].second }; // R1 is map

	for (auto it3 : R1) { // To check if the course exists already in any semester
		auto& R4{ get<2>(*it3.second) }; // R4 is the list inside the tuple

		for (auto& i : R4) {
			if (*i == c) return;
		}
	}

	auto it2{ R1.find(semester) };
	if (it2 == R1.end()) {
		R1[semester] = new tuple<int, float, list<course*> >{ 0, 0.0f, {} };
	}

	auto& R2{ get<2>(*R1[semester]) }; // R2 is the list inside the tuple

	for (auto it3 : R2) { // Course already exists, return
		if (*it3 == c) return;
	}

	auto it4{ R2.begin() };

	while (it4 != R2.end()) {
		if (c < **it4) break;
		it4++;
	}

	R2.insert(it4, new course{ c });

	auto& R3{ *R1[semester] }; // Tuple
	float x = (get<0>(R3) * get<1>(R3)) + c.credits * c.num_grade(); // Semester GPA
	int y = get<0>(R3) + c.credits;

	get<1>(R3) = x / y;
	get<0>(R3) = y;

	float sum1 = 0;
	int sum2 = 0;

	for (auto it3 : R1) { // Calculate overall GPA and credits
		sum1 = sum1 + (get<0>(*it3.second) * get<1>(*it3.second));
		sum2 = sum2 + get<0>(*it3.second);
	}

	(*DB[id].first).first = sum2;
	(*DB[id].first).second = sum1 / sum2;
}

void print_student_semester_courses(map<int, pair<pair<int, float>*, map<int, tuple<int, float, list<course*> >* >* >>& DB, int semester, int id) {
	auto& R1{ *DB[id].second };
	auto& R2{ get<2>(*R1[semester]) }; // List in the tuple

	cout << "ID: " << id << endl;
	cout << "Semester: " << semester << endl;
	float sum1 = 0;
	float sum2 = 0;

	for (auto& j : R2) {
		sum1 = sum1 + j->num_grade() * j->credits;
		sum2 = sum2 + j->credits;
	}

	cout << "GPA: " << fixed << setprecision(2) << get<1>(*R1[semester]) << endl;
	cout << "Credits: " << fixed << setprecision(0) << get<0>(*R1[semester]) << endl;

	for (auto& k : R2) {
		cout << "(" << k->name << " " << k->section << " " << k->credits << " " << k->grade << ") ";
	}

	cout << endl;
}

void remove_student(map<int, pair<pair<int, float>*, map<int, tuple<int, float, list<course*> >* >* >>& DB, int id) {
	auto& R1{ *DB[id].second }; // R1 is map

	for (auto it1 : R1) {
		auto& R2{ get<2>(*it1.second) }; // R2 is list

		for (auto& i : R2) {
			delete i;
		}

		delete it1.second;
	}

	delete DB[id].second;
	delete DB[id].first;
	DB.erase(id);
}

void print_student_all_courses(map<int, pair<pair<int, float>*, map<int, tuple<int, float, list<course*> >* >* >>& DB, int id) {
	auto& R1{ *DB[id].second };

	cout << "ID: " << id << endl;
	cout << "Overall GPA: " << (*DB[id].first).second << endl;
	cout << "Overall credits: " << (*DB[id].first).first << endl;

	for (auto& j : R1) {
		auto& R2 = *(j.second); // R2 is tuple

		cout << "Semester: " << j.first << endl;
		cout << "GPA: " << fixed << setprecision(2) << get<1>(R2) << endl;
		cout << "Credits: " << get<0>(R2) << endl;
		auto& R3 = get<2>(R2); // R3 is list inside tuple

		for (auto& k : R3) {
			cout << "(" << k->name << " " << k->section << " " << k->credits << " " << k->grade << ") ";
		}

		cout << endl;
	}
}

void drop_course(map<int, pair<pair<int, float>*, map<int, tuple<int, float, list<course*> >* >* >>& DB, int semester, int id, course c) {
	auto& R1{ *DB[id].second }; // R1 is map
	auto& R2{ get<2>(*R1[semester]) }; // R2 is list
	auto it1 = R2.begin();

	while (it1 != R2.end()) {
		if (**it1 == c) {
			delete* it1; // delete the course
			it1 = R2.erase(it1);
		}
		else ++it1;
	}
}

ostream& operator<<(ostream& str, map<int, pair<pair<int, float>*, map<int, tuple<int, float, list<course*> >* >* >>& DB) {
	str << endl << "DB: " << endl;

	for (auto& i : DB) {
		auto& R1{ *(i.second.second) }; // R1 is map

		str << "ID: " << i.first << endl;
		str << "Overall GPA: " << fixed << setprecision(2) << (*i.second.first).second << endl;
		str << "Overall Credits: " << (*i.second.first).first << endl;

		for (auto& j : R1) {
			auto& R2 = *(j.second); // R2 is tuple

			str << "Semester: " << j.first << endl;
			str << "GPA: " << fixed << setprecision(2) << get<1>(R2) << endl;
			str << "Credits: " << get<0>(R2) << endl;
			auto& R3 = get<2>(R2); // R3 is list inside tuple

			for (auto& k : R3) {
				str << "(" << k->name << " " << k->section << " " << k->credits << " " << k->grade << ") ";
			}

			cout << endl;
		}

		str << endl; // Separate each student's data
	}

	return str;
}
