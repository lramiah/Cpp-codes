m//HW7  Due: Tuesday, December 12.
/*
implementclass class bag, as desbribed in the class description.
Also implement the needed overloaded operator << for printing.  (See main function and sample screenshot.)

No extra functions or external structures (such as array, list, vector, etc.) allowed.

*/

#include <iostream>
#include <vector>

using namespace std;


class ThreeD {//you are not allowed to modify this class.
public:
	int ht;
	int wid;
	int dep;
	ThreeD(int i, int j, int k) : ht(i), wid(j), dep(k) {}
	ThreeD() { ht = wid = dep = 0; }
	int vol() const { return ht * wid * dep; }

};

ostream& operator<<(ostream& str, const ThreeD& t) { str << "[" << t.ht << ", " << t.wid << ", " << t.dep << "]"; return str; }

template <class T1> class node {//you are not allowed to modify this class
public:
	T1 value;
	node<T1>* next = nullptr;
	node<T1>* previous = nullptr;
	node<T1>(T1 t) { next = previous = nullptr; value = t; }

};

template <class T1, class T2 = less<T1>> class bag {
public:
	//There is a doubly linked list structre inside bag.
	node<T1>* head = nullptr;
	node<T1>* tail = nullptr;
	bag() { head = tail = nullptr; }


	//Implement the following 5 functions including Sort.

	bag(const initializer_list<T1>& I) { //Initializer List; 
		head = nullptr;
		for (auto& i : I) {
			if (!head) head = tail = new node<T1>{ i };
			else {
				tail->next = new node<T1>{ i };
				tail->next->previous = tail;
				tail = tail->next;
			}
		}
		Sort(T2{});
	}

	node<T1>* begin() const { return head; }
	node<T1>* end() const { return nullptr; }

	bag(const bag<T1, T2>& B); // copy constructor

	void operator=(const bag<T1, T2>& B) { // copy assignment
		while (head) {
			node<T1>* p11 = head->next;
			delete head;
			head = p11;
		}
		tail = nullptr;
		node<T1>* p1 = B.head;
		while (p1 != nullptr) {
			node<T1>* p2 = new node<T1>(p1->value);
			if (tail == nullptr) {
				head = tail = p2;
			}
			else {
				p2->previous = tail;
				tail->next = p2;
				tail = p2;
			}

			p1 = p1->next;
		}
	}



	~bag<T1, T2>() { //Destructor
		while (head) {
			node<T1>* p11 = head->next;
			delete head;
			head = p11;
		}
		tail = nullptr;

	}
	
private:

	void Sort(T2 func) { //Only to be invoked by other member functions
		node<T1>* p1 = head;
		node<T1>* p2 = head->next;
		while (p1 != tail) {

			while (p2) {
				if (func(p2->value, p1->value)) swap(p1->value, p2->value);
				p2 = p2->next;
			}
			p1 = p1->next;
			p2 = p1->next;
		}
		p1 = head;
		p2 = head->next;

		node<T1>* p3 = nullptr;
		while (p1 != tail) {

			if (!(func(p1->value, p2->value)) && !(func(p2->value, p1->value))) {
				p1->next = p2->next;

				if (p2->next != nullptr) {
					p2->next->previous = p1;
					p3 = p2;
					p2 = p2->next;
					delete p3;
				}
				else {
					tail = p1; 
					p2 = nullptr; 
				}
			}
			else {
				p1 = p1->next;
				if(p2) p2 = p2->next;
			}
		}
	}
};


template <class T1, class T2> bag<T1, T2>::bag(const bag<T1, T2>& B) : bag{}  { //Copy Constructor
	node<T1>* p1 = B.head;
	while (p1 != nullptr) {
		node<T1>* p2 = new node<T1>(p1->value);
		if (tail == nullptr) {
			head = tail = p2;
		}
		else {
			p2->previous = tail;
			tail->next = p2;
			tail = p2;
		}

		p1 = p1->next;
	}
}

class myFunctorClass {
public:
	bool operator()(const vector<int*> p1, const vector<int*> p2) const;
	bool operator()(const bag<int> p1, const bag<int> p2) const;
	bool operator()(const ThreeD p1, const ThreeD p2) const;
	bool operator()(const vector<bag<int>> p1, const vector<bag<int>> p2) const;
	
};

bool myFunctorClass:: operator()(const vector<bag<int>> p1, const vector<bag<int>> p2) const {
	int sum1{ 0 }, sum2{ 0 };
	for (auto i : p1) {
		for (auto* m1 = i.begin(); m1 != i.end(); m1 = m1->next) {
			sum1 += m1->value;
		}
	}

	for (auto j : p2) {
		for (auto* m2 = j.begin(); m2 != j.end(); m2 = m2->next) {
			sum2 += m2->value;
		}
	}

	return sum1 < sum2;
}

bool myFunctorClass:: operator()(const ThreeD p1, const ThreeD p2) const {
	return  p1.vol() < p2.vol();
}

bool myFunctorClass:: operator()(const vector<int*> p1, const vector<int*> p2) const {

	int sum1{ 0 }, sum2{ 0 };
	for (auto& i : p1) { sum1 += *i; }
	for (auto& i : p2) { sum2 += *i; }
	return sum1 < sum2;
}

bool myFunctorClass::operator()(const bag<int> p1, const bag<int> p2) const {
	int sum1{ 0 }, sum2{ 0 };

	for (auto* i = p1.begin(); i != p1.end(); i = i->next) {
		sum1 += i->value;
	}

	for (auto* j = p2.begin(); j != p2.end(); j = j->next) {
		sum2 += j->value;
	}
	return sum1 < sum2;
}

template <typename T1, typename T2 = less<T1>> ostream& operator<<(ostream& str, const bag<T1, T2>& t); //forward printing
template <typename T1, typename T2 = less<T1>> ostream& operator<<(ostream& str, const bag<T1, T2>&& t); //Reverse printing
template <typename T1> ostream& operator<<(ostream& str, const vector < T1*> v);
template <typename T1> ostream& operator<<(ostream& str, const vector < T1> v);


int main() {
	bag<int> B0{ 3,4,1,4,5,6, 2, 1 };
	cout << B0 << endl;
	auto B0a{ B0 };
	cout << move(B0a) << endl;

	bag<int> B1{ B0 };
	auto B1a{ B1 };
	cout << endl << B1 << endl;
	cout << move(B1a) << endl;
	bag<int> B2{ B0 };
	B2 = B1;
	auto B2a{ B2 };
	cout << endl << B2 << endl;
	cout << move(B2) << endl;
	
	bag<vector<int*>, myFunctorClass> B3{ {new int {5}, new int{7}, new int{11}}, {new int {2}, new int {9}} };
	auto B3a{ B3 };
	cout << endl << B3 << endl;
	cout << move(B3a) << endl;


	ThreeD t1{ 1,3,2 }, t2{ 4,0,0 }, t3{ 3, 1,1 };

	bag<ThreeD, myFunctorClass> B4{ t1, t2, t3 };
	auto B4a{ B4 };
	cout << endl << B4 << endl;
	cout << move(B4a) << endl;

	vector<bag<int>> V1{ {1,2,5}, {3,1,1}, {0,1,2} };
	cout << endl << V1 << endl;
	bag<int> b11{ 5,4,3, 5 }, b22{ 4,3,2, 3 }, b33{ 1, 2,3,2 };

	auto p2 = new bag<int>{ 1,2,3,1 };
	cout << endl << *p2 << endl;
	delete p2;
	auto p = new node<bag<int>>{ b11 };
	cout << endl << p->value << endl;
	delete p;
	bag<bag<int>, myFunctorClass> B6{ {  5,4,3, 5}, {4,3,2, 3}, {1, 2,3,2} };
	auto B6a{ B6 };
	cout << endl << B6 << endl;
	cout << move(B6a) << endl;
	bag<bag<int>, myFunctorClass> B7{ b11, b22, b33 };
	auto B7a{ B7 };
	cout << endl << B7 << endl;
	cout << move(B7a) << endl;


	auto p10{ new node<vector<bag<int>>>   {    {{9, 4, 2}, { 3,3,3 }, { 1,2,3 }}     } };
	cout << endl << p10->value << endl;
	delete p10;
	bag<vector<bag<int>>, myFunctorClass> B8{ {{9,4, 2}, {3,3,3}, {1,2,3}}, {{4,1}, {0,5, 7}}, {{2,1,2}, {0,1,2}, {0,2,1,0}} };
	auto B8a{ B8 };
	cout << endl << B8 << endl;
	cout << move(B8a) << endl;
	return 0;
}


template <typename T1, typename T2> ostream& operator<<(ostream& str, const bag<T1, T2>& t) {
	str << "< ";
	for (auto* i = t.begin(); i != t.end(); i = i->next) {
		str << i->value << " ";
	}
	str << ">";
	return str;

}

template <typename T1, typename T2> ostream& operator<<(ostream& str, const bag<T1, T2>&& t) {
	str << "< ";
	auto* i = t.tail;
	while (i) {
		str << i->value << " ";
		i = i->previous;
	}
	str << ">";
	return str;
}

template <typename T1> ostream& operator<<(ostream& str, const vector<T1*> v) {
	str << "[ ";
	for (auto& i : v) {
		str << *i << " ";
	}
	str << "]";
	return str;
}

template <typename T1> ostream& operator<<(ostream& str, const vector<T1> v) {
	str << "[ ";
	for (auto& i : v) {
		str << i << " ";
	}
	str << "]";
	return str;
}

